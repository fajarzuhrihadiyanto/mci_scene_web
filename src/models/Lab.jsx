/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React from 'react'
import { useGLTF } from '@react-three/drei'
import { useThree } from '@react-three/fiber'
import gsap from 'gsap'

import Room from './Room'
import CommandCenterArea from './command center area/CommandCenterArea'
import Logo from './Logo'
import ChamberRobotArea from './chamber robot area/ChamberRobotArea'
import HelixDna from './HelixDna'
import Door from './Door'
import PanelScreenArea from './panel screen area/PanelScreenArea'
import GeneralInformationArea from './working area/GeneralInformationArea'
import useMainStore from '../store/useMainStore'
import { addVector3 } from '../utils'
import { ControlsContext } from '../context/ControlsContext'
import FacilitiesArea from './working area/FacilitiesArea'

const Lab = (props) => {
  const { nodes, materials } = useGLTF(process.env.REACT_APP_MODEL_URL)

  // get the state and setter from the store
  const focusTarget = useMainStore.useFocusTarget()
  const cameraPosition = useMainStore.useCameraPosition()
  const controlsTargetOffset = useMainStore.useControlsTargetOffset()

  const controlsTarget = addVector3(cameraPosition, controlsTargetOffset)

  const { controls } = React.useContext(ControlsContext)

  const { camera } = useThree()

  React.useEffect(() => {
    if (controls.current) {
      if (focusTarget !== null) {

        // animate camera to focus target
        gsap.to(controls.current.target, {duration: 1, ease: 'power4.inOut', x: controlsTarget[0], y: controlsTarget[1], z: controlsTarget[2]})
        gsap.to(camera.position, {duration: 1, ease: 'power4.inOut', x: cameraPosition[0], y: cameraPosition[1], z: cameraPosition[2]})
        
      } else {
        // enable rotate and set rotate speed back to default
        controls.current.enableRotate = true
        controls.current.rotateSpeed = -.5

        // animate back camera to original position 
        gsap.to(camera.position, {duration: 1, x: cameraPosition[0], y: cameraPosition[1], z: cameraPosition[2]})
        gsap.to(controls.current.target, {duration: 1, x: controlsTarget[0], y: controlsTarget[1], z: controlsTarget[2]})
      }
    }

  }, [focusTarget, cameraPosition, controlsTarget])

  return (
    <group {...props} dispose={null}>
      <group name="Scene">
        <Room nodes={nodes} materials={materials} />
        <CommandCenterArea nodes={nodes} materials={materials} />
        <Logo nodes={nodes} materials={materials} />
        <ChamberRobotArea nodes={nodes} materials={materials} />
        <HelixDna nodes={nodes} materials={materials} position={[1.342, 0.05, 3.413]}/>
        <HelixDna nodes={nodes} materials={materials} position={[1.342 + 1.3, 0.05, 3.413]}/>
        <Door nodes={nodes} materials={materials} />
        <FacilitiesArea nodes={nodes} materials={materials} />
        <GeneralInformationArea nodes={nodes} materials={materials} />
        <PanelScreenArea nodes={nodes} materials={materials} />
      </group>
    </group>
  )
}

useGLTF.preload(process.env.REACT_APP_MODEL_URL)

export default Lab
